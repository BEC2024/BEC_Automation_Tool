<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/+AAB//gAA//8AAf//wAP///////////8=
</value>
  </data>
</root>